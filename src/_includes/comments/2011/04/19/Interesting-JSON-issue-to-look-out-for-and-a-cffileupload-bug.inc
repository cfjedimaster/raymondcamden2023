
<div class="comment" id="c_1713731744">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731744">1</a> by MikeG
		posted on 4/20/2011 at 2:22 AM
		</div>
		<div class="comment_text"><p>I have seen it where is display \\invalidtag.  The fix was in application.cfc to do this</p><p>this.securejson=false</p><p>I think in the CF administrator the default securejsoprefix is \\</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731746">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731746">2</a> by Raymond Camden
		posted on 4/20/2011 at 5:16 AM
		</div>
		<div class="comment_text"><p>Right - that's another way to turn it off if you don't have access to the CF Admin.</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731753">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731753">3</a> by Patrick Heppler
		posted on 4/20/2011 at 1:52 PM
		</div>
		<div class="comment_text"><p>That's exact what I expect. SecureJSON means, for me, secure all JSON generated by CFC or serializeJSON. I wouldn't call it a bug.</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731752">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731752">4</a> by Raymond Camden
		posted on 4/20/2011 at 3:12 PM
		</div>
		<div class="comment_text"><p>I'm not calling it a bug. I'm saying it isn't what I expected. :)</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731754">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731754">5</a> by Aaron DeRenard
		posted on 4/21/2011 at 6:21 PM
		</div>
		<div class="comment_text"><p>I was just wondering...  What exactly about prefixing a json response with \\ makes it secured?  I don't understand how that secures anything.  Though I can't help but think there has to be something I'm missing if Adobe took the time to implement it.</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731802">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731802">6</a> by Jason Dean
		posted on 4/21/2011 at 7:32 PM
		</div>
		<div class="comment_text"><p>What the prefix is protecting your users from is a little known exploit call JSON Hijacking. Which I discuss in my Practical Ajax Security presentation</p><p><a href="http://disq.us/url?url=http%3A%2F%2Fexperts.adobeconnect.com%2Fp56901257%2F%3Flauncher%3Dfalse%26fcsContent%3Dtrue%26pbMode%3Dnormal%3At5E9C-tkKrQ1L083cBubQbsyXQs&amp;cuid=3321886" rel="nofollow noopener" title="http://experts.adobeconnect.com/p56901257/?launcher=false&amp;fcsContent=true&amp;pbMode=normal">http://experts.adobeconnect...</a></p><p>The recording is cut off right as I get into the meet of the subject and the countermeasures, but the slides are available here: <a href="http://disq.us/url?url=http%3A%2F%2Fwww.12robots.com%2Findex.cfm%2F2010%2F8%2F19%2FMy-Presentations-slides-from-cfObjective-NCDevCon-and-CFUnited%3Ajanbbf6SBcix85nHsphPQiPq_dk&amp;cuid=3321886" rel="nofollow noopener" title="http://www.12robots.com/index.cfm/2010/8/19/My-Presentations-slides-from-cfObjective-NCDevCon-and-CFUnited">http://www.12robots.com/ind...</a></p><p>You can also see the CFUnited version of the preso here: <a href="http://disq.us/url?url=http%3A%2F%2Fwww.cfmumbojumbo.com%2Fcf%2Findex.cfm%2Fcfconferences%2Fcfunited-2010%2Fjason-dean-ajax-security%2F%3Amx4rnp6DWu-Cv2iVARQPa1TjZjs&amp;cuid=3321886" rel="nofollow noopener" title="http://www.cfmumbojumbo.com/cf/index.cfm/cfconferences/cfunited-2010/jason-dean-ajax-security/">http://www.cfmumbojumbo.com...</a></p><p>So essentially, JSON hijacking is a form of a Cross-Site request forgery where the end user is tricked into making a request to a secured service that returns JSON data. The hacker uses a page that he controls to request the data and the users browser makes the request. Then the data is returned (provided the users browse passes along appropriate cookies and such and the user is logged in).</p><p>The data returned can only be exploited if the end user is using an old browser (like FF 2.0 and older version of Opera, I think) and it is wrapped in an Array.  The hacker overrides the Array() constructor in JavaScript and rips the data out.</p><p>Personally, I think that JSON hijacking is of very little concern to most of us and that if the prefix breaks your code then don't use it.  Instead I would simply make sure that the returned data is wrapped in an object, for example {data: [1,2,3]}  instead of an array and you should be protected.</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731805">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731805">7</a> by Raymond Camden
		posted on 4/21/2011 at 7:38 PM
		</div>
		<div class="comment_text"><p>Thanks Jason. That's exactly what I was going to say. Honest. (Ok, maybe not...)</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731806">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731806">8</a> by Aaron DeRenard
		posted on 4/21/2011 at 8:16 PM
		</div>
		<div class="comment_text"><p>Jason, thanks a lot!  Long time no talk :-)  Overloading the Array() method is something I actually have not thought of.  Means more work for me...  but I like it.   Thanks for that.</p><p>Now in cross-site request forgery, it falls down to ...  nevermind.  <a href="http://disq.us/url?url=http%3A%2F%2Fwww.12robots.com%2Fenclosures%2FDeanJason-CFUnited-PracticalAjaxSecurity.pdf%3AVK1WiIa6vUO9VvXfZUTOxrTKBk4&amp;cuid=3321886" rel="nofollow noopener" title="http://www.12robots.com/enclosures/DeanJason-CFUnited-PracticalAjaxSecurity.pdf">http://www.12robots.com/enc...</a> explains it well.</p><p>Alright, so the idea is to make malicious intent code to fail by prepending bogus values to the response, I guess?  That sounds like a pretty weak attempt at securing things.  I don't think I personally would bother with it.</p><p>I still don't understand the intent with the prefixing...  And I may never.  lol</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731807">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731807">9</a> by Jason Dean
		posted on 4/21/2011 at 8:21 PM
		</div>
		<div class="comment_text"><p>"so the idea is to make malicious intent code to fail by prepending bogus values to the response, I guess? That sounds like a pretty weak attempt at securing things. "</p><p>It's not really prepending bogus values, it's putting the code into a context where it cannot be executed, which is, essentially, the same way we mitigate the risk of SQLi and XSS, right?</p></div>
	</div>
</div>
		
<div class="comment" id="c_1713731803">
	<div>
		<img src="//a.disquscdn.com/1611874952/images/noavatar32.png" class="comment_author_profile_pic">
	</div>
	<div>
		<div class="comment_header">
		Comment <a href="#c_1713731803">10</a> by Aaron DeRenard
		posted on 4/21/2011 at 9:58 PM
		</div>
		<div class="comment_text"><p>Well by bogus values i meant syntactically inexecutable values, which prevents it from being executed.</p><p>But I do think I understand what you are saying.  Thanks a bunch!  :-)</p></div>
	</div>
</div>
		